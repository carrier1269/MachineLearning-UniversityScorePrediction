{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "37ee54b8-3314-4ee5-b4b2-29de6c35711e",
   "metadata": {},
   "source": [
    "# 대학마다 대학평가점수 예측 , 회기 알고리즘 - Linear Regression\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "b14a4cf0-28c1-4610-afe3-1700584f881d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import myutils as my\n",
    "\n",
    "# 라이브러리 호출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "3f6a1c73-6fba-49b4-ae9a-12a6673340e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5250, 6)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('universityrank.csv') # csv 파일을 데이터프레임 형식으로 읽어온다.\n",
    "df.shape # 데이터프레임의 크기 확인하기."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "3a3985e4-842e-4836-8cac-4ddaa55c0395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Name</th>\n",
       "      <th>Point</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>University of Cambridge</td>\n",
       "      <td>94.6</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>University of Oxford</td>\n",
       "      <td>94.6</td>\n",
       "      <td>Oxford</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>Massachusetts Institute of Technology (MIT)</td>\n",
       "      <td>92.5</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>Johns Hopkins University</td>\n",
       "      <td>92.1</td>\n",
       "      <td>Baltimore</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Rank                                         Name  Point       City  \\\n",
       "0  2018     1                           Harvard University   97.7  Cambridge   \n",
       "1  2018     2                      University of Cambridge   94.6  Cambridge   \n",
       "2  2018     2                         University of Oxford   94.6     Oxford   \n",
       "3  2018     4  Massachusetts Institute of Technology (MIT)   92.5  Cambridge   \n",
       "4  2018     5                     Johns Hopkins University   92.1  Baltimore   \n",
       "\n",
       "           Country  \n",
       "0    United States  \n",
       "1   United Kingdom  \n",
       "2   United Kingdom  \n",
       "3    United States  \n",
       "4    United States  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head() # 데이터프레임의 상위 다섯개 데이터를 출력한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "c507139f-1886-4826-93e5-15fdac246540",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year         0\n",
       "Rank         0\n",
       "Name         0\n",
       "Point      220\n",
       "City         0\n",
       "Country      1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum() # 결측치 데이터값의 개수를 합산하여 출력한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "3aa9d4a4-4426-4b65-bbb3-25b17c2c7ffb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna(subset=['Point']) # 데이터프레임에서 Point 컬럼값의 결측치 값을 제거한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "83d7781a-0f48-450f-848f-0bafbfc273a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year       0\n",
       "Rank       0\n",
       "Name       0\n",
       "Point      0\n",
       "City       0\n",
       "Country    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum() # 결측치 데이터값의 개수 합산을 재확인함으로써 결측치 값이 제거 된 것을 확인 할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "f7afb1e1-e531-479f-83cc-778e214fd61f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAACAIAAAN9CAYAAAAD6UnoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAA9hAAAPYQGoP6dpAABvZElEQVR4nOzdd7if8+H/8dfn5GTHDCIpidhCQmxq71VqxGqN2mKUhMhCGytipCJGkbaKonyFokYpNVpBBFEzVoyo2jJIzjn37w+/82kitFTlyJ3H47pcknPuzyfv+5/3dY/n/b4rRVEUAQAAAAAAAABKoaapBwAAAAAAAAAA/O8IAQAAAAAAAACgRIQAAAAAAAAAAFAiQgAAAAAAAAAAKBEhAAAAAAAAAACUiBAAAAAAAAAAAEpECAAAAAAAAAAAJSIEAAAAAAAAAIASEQIAAAAAAAAAQIkIAQAAAAAAAACgRIQAAAAAAAAAAFAiQgAAAAAAAAAAKBEhAAAAAAAAAACUiBAAAAAAAAAAvqb6+vpZ/l4URRONBGB2QgAAAAAAAAD4mpo1a5YkueKKK/LWW2+lUqk08YgA/kUIAAAAAAAAAP+F4cOHZ7/99stLL72UZPZVAgCaihAAAAAAAAAAvqbp06fnH//4R5LkqquuSvKvVQIAmlql8MISAAAAAAAA+Nqee+65rLPOOmnXrl3uuOOOrLzyyimKwmsCgCZnRQAAAAAAAAD4mhoaGrLCCitk9913z5tvvplHH300SUQAwHeCEAAAAAAAAAC+ppqaz26zbbzxxkmSc845J2+88UZTDgmgSggAAAAAAAAAX6C+vr765+nTp8/yu4aGhiTJj370o2y99dZ5/fXXM2nSpFl+B9BUhAAAAAAAAADwBZo1a5YkOfXUUzNw4MDcdddd1d/V1NRkxowZqa+vz1prrZUPPvggZ599dhoaGqqrBQA0lUpRFEVTDwIAAAAAAAC+K+rr66sRwHXXXZc99tij+ru9994766yzTg499NA0a9YszZo1y6RJk7LOOuukpqYmd9xxR1ZYYQVBANCkzD4AAAAAAADw/zU0NFQjgMsuuywLLbRQHnjggZx77rlZZpllcsMNN+SnP/1p1l577QwYMCAPP/xwFltssWy//faZOHFi/vCHPySJCABoUlYEAAAAAAAAgM/52c9+liFDhuTHP/5xRo4cmfnnnz+vvPJKJk6cmKFDh+bpp5/OxIkT06JFi/zkJz/JW2+9lVtuuSWrrrpqbrjhhiy55JKpVCpNvRvAPEoIAAAAAAAAwDyvKIrqjfu//vWv6dWrV9Zdd930798/a6211izbTpkyJe+8805+85vf5Oabb864ceOq3zHffPPltttuy/rrrz/LdwLMSUIAAAAAAAAA5mkNDQ2zLOU/atSoHHHEEXnwwQezxhprzLLt52/uv/3223n88cdz0UUX5YUXXsjTTz+d7bbbLtdee23atm07x/YBYGZCAAAAAAAAAEhy2GGHZcKECVlttdXy8ssv5//+7/9SX1+fZs2azbZtYzzQGAZ89NFHeeutt7Lbbrtl6tSpue+++9KpU6cm2AuApOY/bwIAAAAAAADl0/i8bFEUefPNN/P73/8+f/7zn3PBBRfkySefzPvvv/+FEUCS6goCjasDzD///OncuXN69uyZl156Kb///e/nzE4AfAEhAAAAAAAAAKX3+UWyZ8yYUb2J/8knn6RTp0656667ssIKK+TTTz/Np59+mkceeeQrf399fX1atWqVvfbaK0ny7rvv/u8GD/A1CQEAAAAAAAAotYaGhupN/7feeitJ0rx58yTJz3/+8wwaNCiTJ0/O6quvnquvvjrLLrtsXn/99fziF7/IP/7xj6/0bzSuHPDwww/P8ndv6QaaghAAAAAAAACAUmtcxn/77bfPCSeckNdffz1J0qdPn/z85z/P1KlTM23atBRFkdVWWy3XXXddlltuudx+++3p3bt33n///a/071x77bW56KKL0qlTp+y///5J/vXqAIA5qbapBwAAAFB2DQ0N1YtOn1dfX/+l75sEAADgf+eee+7JI488kqlTp+Z73/te/vGPf+TXv/51dttttxx99NFZdNFFk3x2DrfqqqvmuuuuS69evTJ69OgkyWWXXZaFFlro3/4bjTf9//jHP2appZb6VvcH4N+pFNYjAQAA+NbU1dWltrY2M2bMyBNPPJG///3vadWqVRZffPFsvPHGTT08AACAecYnn3ySW2+9NaeddlrGjx+f+vr6bLvttrnooovSuXPnFEVRvZHfGHSPHz8+vXr1yvPPP58f/vCHGTVq1H+MAT744IMsuOCCc2CPAL6cVwMAAAB8SxojgClTpuRHP/pRttlmm/zkJz/JXnvtlU033TQ//OEP89JLLzX1MAEAAEqvKIq0atUqu+66axZeeOFUKpU0a9Ys7du3T+vWrZPMuoR/TU1NGhoa0r1791x33XVZfvnlc+ONN2a//fbLu++++6X/RpIssMAC3/4OAfwHVgQAAAD4FjQ+PTJlypRsvPHGeeyxx7LFFltk++23z5QpU3LNNdfkqaeeymqrrZZLLrkka6yxhvdGAgAAfIvq6ury7LPPpkePHunRo0c++eSTvPrqqznkkENy9NFHZ5lllpll+6IoUhRFdWWAnXbaKa+88kr+8Ic/ZIcddmiivQD4aoQAAAAA35IZM2Zkv/32yzXXXJMBAwZk8ODB1SdNXnnllay66qqpq6vLmWeemd69e6emxqJtAAAA37aHH344rVu3zssvv5zBgwfnhRdeyCGHHJKf/vSnWXrppZP8K+5OPju3a968eR599NE8/fTT2XfffZty+ABfiRAAACiN+vr6NGvWrKmHAVA1bty4bLHFFll99dVzyy23pGXLlkmS6dOnZ4sttshDDz2U448/Pscdd9ws75ic+YITwNdVFEXq6+tTW1tb/Zl5BQCYF33+GKgoillWYqurq8vvf//7DB069AtjgCQZP358Hn300ey4445p3779l343wHeNGQoAKIXGCGDy5MkZMWJEPvnkk+gdgaY2ZsyYvP/++znooIOqEUBDQ0M22WSTPPDAAznhhBPSv3//LLTQQpk6dWruvvvuJHExCfha6uvrkyQff/xx9e+1tbWZPHly9tprr7z++uvmFQBgnlNfX189BnrhhRfy7LPPZty4cbNsU1tbmz322CMDBgzIcsstl0suuSQjRozIhAkTkiSPPvpo+vbtm759++bvf//7LJ91fAV815mlAIBSaNasWT755JOsttpqGTNmTFq1auVd20CTmzZtWpLko48+SvJZBLDBBhvkoYceyqBBg9KvX7/MN998SZKpU6fmiCOOyCWXXNJk4wXmTs2aNcvDDz+cTTbZJLfeems1AlhvvfVy7bXXViMjAIB5RUNDQ3XVyGHDhmX77bfPuuuum7XXXju9e/fOgw8+WH2ApFmzZtl9992rMcDFF1+cE044IUOHDs1hhx2Wu+66K/369ctGG23UlLsE8LXV/udNAAC+mz6/BNtzzz2Xl156KQcffHCS2Zd7A5jTGpeNfP311zN16tRsvvnmGTNmzGwRQJL07ds3r7/+erp169ZUwwXmUjNmzMioUaMybty4nHzyySmKIoMHD87zzz+fU089NXvssUdTDxEAYI5qvF40cODADB06NG3btk3Pnj3z8MMP5+KLL84TTzyRPn36ZOedd05NTU01BmjRokXOP//8jB49OqNHj06rVq0yYsSIHHnkkUm8DgCYuwgBgK+srq5ulndMAjSFYcOGZYEFFsihhx6ampqaWU7A3nvvvSRJx44dm3KIwDxu5gipZ8+e6dSpU0aOHJnrrrsuzz33XAYOHDhbBHD++efnpptuyvbbb5/u3bs31dCBuVTz5s1z3HHHpXnz5rnwwguz++67p66uLsOGDcthhx2WVq1auWgNAMxzbrvttlx44YXZaaedMnDgwKy11lp54IEHMnLkyIwePTqnnHJK6uvrs9tuu1VjgJ133jlrrrlmbrjhhtTU1GSVVVbJ5ptvnkQEAMx93NEDvpKZ3zF57rnnpk+fPmnXrl1TDwuYx9x2223p379/unbtmjZt2mSfffZJTU1N6uvr06xZs8yYMSNJqvOT1QCAb1vj/DOzmeee7t27Z+edd84FF1yQjz76KD/+8Y9z/PHHzxIBjBgxIkOHDk2HDh1yxhlnZIEFFphj4wfKY7nllkvv3r1z5ZVX5uOPP86iiy6aFVZYoRoBOC4CAMru8+dnTz31VNq1a5ef//zn6dGjR5Jkgw02yCKLLJJFFlkkl112Wc4444wkqcYANTU16dKlS4499thZvlsEAMyNhADAV9KsWbNMmzYtm2++eR555JF06NAhhx56aFMPC5jHrLjiijn++ONz/vnnZ8iQISmKIvvuu2/1JO/tt99OkllusAF8WxpXS5o2bVrOOuusvPzyy2nTpk0222yzbL311tUo6fzzz8+LL76Y22+/PX/84x+z+uqrp3PnzmnVqlWuuOKKXHPNNVlsscUyevToLL300k28V8DcqPHC9GmnnZbp06dn1VVXzeOPP54TTjghtbW12XLLLZN4bRIAUG6N14cGDx6c+eabL+PGjcs222yTHj16pL6+PpVKJTU1NVlxxRVzzDHHJMkXxgBfFHyLAIC5kRAA+LeKokhRFKmpqcnQoUPzyiuvZPDgwfnRj37U1EMD5kFdu3bNEUcckUqlkuHDh+eUU05Jkuy7775Jktdeey1Jsvjiiyf51026hoaGNDQ0pFmzZqlUKi6CA99YQ0NDamtrM2XKlGyxxRYZM2ZM9XdXXnlldthhh1xwwQVZcMEFkyR//OMfc+CBB+baa6+d5cmStm3bZquttsr555+f5ZZbbk7vBlASjRemf/rTn2arrbbKeuutl7PPPjuXXXZZjj322IwYMSKbbbZZ9Tio8RyvkSfcAICyuP/++3P66aenWbNmWXDBBfODH/wgSWa7sb/sssvOEgMMGzYsDQ0N2X333WfbFmBuVSmKomjqQQDfTY030BoLyC233DKffvpp7rzzzrRq1eoLy0iAOWHixIm58MILM3z48HTp0iUDBw7M/vvvn9NOOy0nnnhi3njjjXTs2PFLP//BBx9Ub84B/Lfq6uqy++675/bbb8/uu++eXXbZJY8++miuvfbavPDCC9lyyy1zzTXXZKGFFqp+5p577sm4cePy5ptvpnXr1tl6662z0korpX379k24J8DcaOaw8YvOzV5++eUMGTIkl19+ebp161aNAWa+6X/77bdn1VVX/bfHTQBfxnUh4LvqrLPOynnnnZc333wza6+9di6//PKssMIKX7jthAkTMmLEiIwcOTJdunTJnXfeKdIGSkMIAPxbkydPzjLLLJM99tgjzz//fA488MD06tUrM2bMSPPmzZt6eMA8bOYYoFOnThkyZEj+8pe/5Fe/+lUOO+ywVCqVTJs2Lc2aNcvUqVPzwQcfpHnz5nnzzTezyCKL5IYbbkirVq2aejeAudiLL76YzTbbLL169cqQIUPSpk2bTJ8+PU8++WQOOuigPPnkk9liiy1y7bXXzhIDAHxTjdF2XV1dpk+fnkmTJmWZZZap/r4xEpg4cWJOPvnkagzwi1/8IltssUWS5Iorrkjfvn3TvXv33HHHHdWVkwC+rkGDBmXVVVfN7rvv3tRDAeYx/y5IGjZsWM4666x8+OGHGTJkSI444ogvfZXkCy+8kNNPPz1rrLFGjjzyyG9zyABzlBAA+Lduu+22bL/99tW/H3vssTnnnHOacEQA/9IYA5x77rnp1q1b3nvvvbz++uvVC+NJUltbm6IoUl9fn3bt2mWBBRbIrbfemh49ejTx6IG5zeeXzr777ruz995756mnnsqiiy46y0Wo559/PrvvvvtsMUDjzTuA/1bjXDN16tQceeSRGT9+fMaPH58f/vCH2WabbfKjH/0ozZs3/8IYoEuXLjnzzDPzwgsv5Pzzz8/06dNz7733Oi4C/mu33HJLdtxxx5xwwgk544wzvGoEaBKXXnppevbsmTXWWGOWsPGcc87Jz372s8yYMSNnnXVW9t9//y+NAT788MMssMACSeKVkkBpCAGA/+jKK6+svn97l112yW9+85u0a9fOyR0wR3zRXDPzzbaJEyfmggsuyHnnnZeiKLLzzjvnuOOOS11dXWbMmJH27dunoaEhdXV1mX/++dOmTZssvvjiTbErwFxs5qdvP/zww0yZMiXjx4/PYYcdlsceeyyLLrrobJ957rnnsueee+aJJ56YJQawjC7w32q8KD1lypRstNFGGTduXDp06JD33nsvM2bMyAILLJCDDjoop556alq2bFnd/rXXXsvpp5+eX/7yl9Xv6tq1a/7whz9k5ZVXbsI9AuZ2DzzwQLbZZpssvPDCGTNmjFeNAHPcZZddlkMOOSQbb7xxzjvvvHTv3n2Wm/jnnntuTjrppNTV1WXYsGE54IAD0q5duy/9PhEAUCbu4AFfqqGhIUny4x//OJdffnmS5IYbbsjw4cOTJDU1NdVtAL4NdXV1qampyYwZM/LCCy/knnvuyfvvv5/p06dXt+ncuXMOP/zw9OnTJ0VR5LHHHsvLL7+cddddNxtuuGG6deuWVVZZJT169MjSSy8tAgC+tvr6+tTW1mbq1KnZe++9s84662SppZbK4MGD09DQkJdeeqm63cxWWGGFXHPNNenRo0fuuuuubLPNNvnggw9EAMB/rVKppL6+PocffngmTJiQPn365Nlnn82jjz6as88+Oy1btsw555yT448/Pp9++mkqlUqKosiSSy6ZCy64IOeff37222+/DBgwIHfffbcIAPjGNthgg2y11VZ5/fXXc8MNNySJa0XAHLXeeutl0003zV/+8pccc8wxefLJJzPz8699+vTJkCFDUltbm379+uXXv/51Jk+e/KXfJwIAysSKAECSWUvHmZ++nXn52quuuir77LNPks/esXTcccfNtj3A/0rjE7NTpkzJ/vvvnzFjxuT111/PiiuumB/84Ac54IADssIKK1S3f/XVV3PRRRdl+PDh6dy5cwYPHpz99tsviZob+OamTp2azTbbLA8//HCWXXbZNDQ0ZOLEiamrq8see+yRq6++OskXv6Py+eefz1ZbbZWJEyfmlVdeSefOnZtiF4C52MznZUVRZJVVVsnaa6+dkSNHpm3btkmSyZMn54477shPf/rTvPnmmznqqKMybNiwtGzZ0kokwLeicW657bbbsvPOO2fLLbfMzTff3NTDAuYhjdd7nn/++RxxxBG5++67s8kmm2T48OHp0aPHbK8JOPnkk5Mkp556ag488MAvfU0AQFm4cwekvr4+lUolDQ0N1aduG5fUrq2trT55+6Mf/ShXXnllkqRfv345++yzk1gZAPh2NL77duONN87//d//pW3btunWrVsmTZqUs846K0cddVSefPLJ6vZdunRJ7969c+yxx2bixIk588wzc8kllyRRcwP/nZmb6eHDh+eFF17IgAED8tRTT+W+++7LNddck9ra2lx77bU57LDDknw2d31+ZYDll18+d911VyZMmCACAP4rtbW1mTJlSvr06ZORI0fm9ddfT//+/dO2bdvqnNOuXbvsuOOOOf/889OpU6ecf/756devXz799NM0a9YsM2bMaOK9AOZWn7/m0/j3xsBo5ZVXTocOHXLrrbdm9OjRc3x8wLyrcfWj5ZdfPiNHjszmm2+ee++9N8cee+xsKwP07ds3p556aqZPn54+ffpUV3YDKDMhAMzj6urq0qxZs0ybNi0DBgzIpptumlVWWSUbbrhhjj/++Lzzzjtp0aJFNQbYe++9xQDAHDNo0KC8+OKLGThwYMaNG5dHH300V111VTbddNPcddddOfLII2eJATp37pzevXvnuOOOy7PPPptLLrkkH374YRPuATC3qqurS6VSSV1dXZLk3nvvTc+ePTN48OC0aNEiiy22WHbZZZfcc889qa2tzSWXXPJvY4Bll102Sy+99BzfD2Du8/TTT2fatGmz/KyhoSHHH398fvGLX+Smm27KAgsskObNmyfJLKuzNW/ePNtvv/0sMcCAAQPy6aefVrcH+DpmXgXy9ddfT/KveacoijQ0NKRz584ZMGBAKpVKHnnkkervAP5XPn9+lfxrnmmMAVZYYYWMHDkyW2yxRe69994cd9xxs8UAxxxzTE4++eSMHDkyq6666hwbP0BT8WoAmIc1LuE2efLkbLXVVnnooYfSqVOndOjQIe+++24mTpyY7t2757bbbkunTp3y6aefpmXLlkmS3/3ud/nxj3+cJPnZz36Wk046qSl3BSiJxmVvGy82bbnllmnbtm1+97vfpU2bNkk+uxD19NNP54QTTshtt92WDTbYICNHjkyPHj2q3/Pyyy/nt7/9bXbfffestNJKTbU7wFxuypQpWWONNbLLLrvkiSeeyIEHHphddtkl06dPT4sWLapz1d/+9rdsvPHGqauryyGHHJKLL744yaxLeQN8FSeeeGLOP//8XHbZZdl5551nWc7/jjvuyIgRI3LbbbclSS666KIceuihSWZ/DdL06dNz6623pk+fPnn11VfTr1+/DB06dM7uDFAqJ5xwQq6//vpst912OeKII7L44otnwQUXrM4/9913X7baaqu0atUqDz30UFZcccWmHjJQQsccc0x69uz5ha+CbPzzc889l7333jvjxo3L1ltvnTPOOCOrrrrqF64W6ZW3QNmZ4WAeVRRFdSWA7bbbLmPHjs2RRx6Z5557LmPHjs3111+fxRdfPOPHj88GG2yQSZMmpWXLlrOsDPC73/0uyWchwHvvvaf2Br6xxmVvd91115x++ukZP358DjnkkLRp06a66khNTU1WWWWVnHXWWdl2223zwAMPzLYyQNeuXTNo0CARAPCN3HHHHXn++eczdOjQ3HbbbXnssceSJC1atEjyrxWR1ltvvfzlL3+prgxwxBFHJIkIAPhaPv744zzzzDP56KOPMnXq1FkigCTZeuut07dv3+y0005Jkl//+td58MEHk/zrSbhGLVq0yPbbb5+hQ4dmpZVWyr777jvndgSY6xVFMcvTt2+88UYeeOCBvPXWW7nggguy2WabpVevXvnjH/9YXSVgo402yn777ZePPvoof/7zn5N88RO8AP+te++9NyNGjMhPfvKT/P73v08y6zHQzCsDXHzxxamtrc0dd9yRfv365YknnvjCa9ciAKDszHIwj6pUKqmvr8/AgQPzyCOP5Oijj84ZZ5yRtm3b5plnnsnFF1+ct956K0sssUReeeWVbLjhhpk0aVJatGiRTz/9NEmy55575ve//32efPLJLLzwwt7BDfxP/PKXv8xNN92UK6+8MtOnT//Sk7Ju3brNEgMcc8wx1Zt0iRtwwDe3yy675KKLLkrr1q2TJC+88ELefvvtWbb5fAzQpk2bXHTRRenTp09TDBmYi80333z5xS9+kT/96U/Zd999M23atPz5z3+e5TUBm222WY466qhss802efjhh3PuuedmzJgxSb44Bthll10yZsyYdOvWbY7vDzD3+KJXPTbGSIMHD86nn36aBx98MI899lj69OmTrl275u67784OO+yQbbfdNgMHDsyECROyySabZLHFFssVV1wxy3cA/C9ssskmOe2005J8dl362muvTTJ7DNDQ0JDVVlstPXr0yJJLLpm77rorBx10UN59990mGztAU/FqAJiHPfHEE9lyyy2z6qqr5sYbb0zbtm3z4osvZsiQIbniiity5JFHZsSIEVl//fXz0EMPZamllsoDDzww22sCAP6XXnzxxVx88cX5zW9+k3fffTf77LNPLrnkkrRs2XK2ZW+Tz96jO2DAgNx8883Zdtttc8MNN5ifgG9s5iUiL7roohx11FFpaGjI0KFD069fvy/d/r777kuvXr1y++23p2fPnnN62MBcbObjnOnTp+f73/9+Xn311VxyySXZZptt0qpVq+q29957b4YOHZo//elP2WmnnXLCCSdknXXWme17AL6ObbfdNjvttFMOO+ywJMlxxx2Xc889N/vtt18uvPDCtG7dOnV1dampqcmoUaMyZsyY/OpXv0qSLLnkkunYsWNeeOGFTJ48OVdeeWV69eplTgL+JxpfcZskQ4cOzcCBA5MkV199dfbYY48kmSUGSD5bqWT55ZfP3//+9+y8885feB4HUHYelYN52CeffJKuXbvmlFNOSdu2bfPWW29l5MiRueKKK3LAAQdkxIgRSZLevXvnmWeeySuvvJJNN900f/7zn/O9732viUcPlNUyyyyTww8/PEnyq1/9KnfccUd+97vfZZ999kltbe1sF5K6deuWU089Na1atcqJJ54oAgC+ti96r2RNTU1mzJiR5s2b5/DDD09NTU0OP/zw9O/fP7W1tbM98d+4MsBGG22UV199dZYbdgBfxczHNx988EGWXXbZ/P3vf8+JJ56Yoiiy7bbbVueWTTbZpLrtTTfdlEqlkn79+mWdddapPhXnxhvwdVx11VW54447cu+99+Z73/teHnrooZx77rnZY489ctxxx1VXSKqpqUlNTU0OPvjgHHzwwTnssMNy55135pprrsnYsWOrrwN4+OGH06tXL3MR8LV90XFMs2bNMn369LRo0SL9+/dPkgwcODB77bVXklRjgMbP3XTTTfnrX/+as88+O2uttdZs53sA8worAsA8bOrUqXnxxRezzDLLpE2bNrn11luz1157ZZtttqm+ZylJHnvssay33nrp0KFDXn/99fTs2TMPP/xwampqHDgB/1MzP4H78ssvZ+TIkbn44ouz1FJLZcCAAdlzzz2/MAZIUj0hBPg6Gp8saWhoSENDQ1588cV07tw5rVq1SqVSmWUVpEsuuaT6hNzZZ5/9pcv/u7gE/C+8+eabOeWUUzJq1Kgsv/zyOeWUU2aJAZJZVwbYddddc/TRR2eDDTZowlEDc5vGc7C6urqcffbZGThwYDVw/NGPfpQTTzwxyy+//H/8nk8++SS/+93vMnbs2Fx00UVp2bJl7r///qy55ppzYC+Aspj5yf/p06fnrbfeSkNDQxZffPHZYuuZVwb45S9/mV69emXBBRfMgw8+mAEDBuTll1/OzTffnNVWWy2J8zRg3mRFAJhHNB7oNB5MFUWRNm3aZJVVVqkeAJ1zzjmZNm1ajj322CT/uqnWqVOnLLPMMhkxYkQuuuiiDBo0yHvegG9k5hO7hoaGfPzxx2nVqtUsT/N37do1Rx99dJLk4osvzumnn56iKLLnnnumefPms53AiQCAr6uuri61tbWZNm1aTjzxxDz44IMZM2ZMVltttayxxhoZMWJEdQnc2traHHLIIalUKjn00ENz3HHHpSiK9O3bd7bvdXEJ+KYaGhrSqVOnnHjiiUmSUaNGVVcG2G677WZZGaBSqaS2tjbXX399WrZsmTXXXNOqJMB/NHHixCy66KJp3bp1GhoaUltbm/79++fGG2/M2LFjU6lU0r1792oEMPM53Oc1NDSkVatWOeCAA3LAAQdkvvnmy7Bhw/Lkk09mzTXXdPMN+EpmnmcuvfTS3HDDDbnrrrvSrFmzdO3aNTvvvHP23HPP9OjRI0nSv3//1NTUpH///jn00ENz6aWXpn379rn//vszderUjBgxohoBJM7TgHmTFQGg5D5/ovbJJ5/MclGosfz+9NNP07Nnz0ybNi1PPfVU2rZtW91m0KBBGT58eF599dUsuuiic3T8QPnMfOPtnHPOyQMPPJCXX3457du3z4ABA7LOOutkscUWq27/6quvZsSIEbn44ovTpUuXDBgwIHvttdeXrgwA8FU0HiNNnjw5W265ZcaMGZPOnTvne9/7XiZOnJg33ngja6yxRq699tosvfTSs12UOvTQQ5MkQ4YMyeDBg5tyV4C52MyrIX2Zz68MMGTIkFligCT505/+lF/+8pc55ZRTstJKK33bwwbmcg899FC222677Lvvvhk2bFg1qr766quz7777Ztlll81zzz2X2trajBo1Kvvss0+S/zxnNV5mvv7667PHHntko402yl133ZXaWs+iAf/ezPPLCSeckLPOOivzzTdfVlhhhXzwwQeZMGFCkmSVVVbJhRdeOMsKSJdeemnOP//8PPXUU0mSJZZYIieeeGIOPvjgJFYCAOZtQgAoscabbZ988kl++ctf5rHHHssTTzyR1VdfPWuuuWZ69+5d3fbjjz/OWmutleeffz6nn3569V1LF110UU477bR069Yt1113XRZYYIGm2h2gBBpvpE2ZMiXbbLNNHnzwwbRv3z7zzTdfXnnllbRr1y6HHHJIfvKTn2TllVeufm7mGGDZZZfNUUcdlf33398FJeC/0nghaNq0adlmm23y0EMP5ZBDDsmZZ56ZNm3a5Iknnsh2222XSZMmZbXVVsu1116b5ZZbbpYYYNSoUTn44IPTvHnzTJo0KQsvvHAT7xUwt2k8X5s+fXrGjBmTsWPH5sMPP8xKK62UFVdcsfq0W/LVYoBp06ZV3+EN8GXq6+tzySWX5Igjjsg+++yTSy65pLoy2zPPPJN77rknW2yxRf7whz+kX79+adasWX7961/nxz/+cZLPbtZVKpVZbqo13sBrPFaaNm1aOnfunO7du+fPf/5zk+wnMHc6++yz069fv+y44445+eST07Nnz3z00Ue55pprct111+Xuu+9O165d87vf/S7rrLNO9XOvvvpq3n777dTX12fhhReurmbyVaJLgFIrgNK48847iw8//LCor68v6urqiqIoismTJxcbbrhhUalUinbt2hXzzz9/UalUikqlUuy+++7F888/X9TX1xdFURQ33HBD0apVq6JSqRTbbrttsdFGGxWVSqXo2LFj8eyzzzblrgEl0DjXTJkypfj+979f1NbWFgcffHDx+uuvF0VRFMOGDSvatWtXtGvXrjj44IOLv//977N8/pVXXimOP/74olKpFOuss07x4YcfzvF9AOZuDQ0N1T/X1dUVffv2LVq1alUcf/zxxeTJk4uiKIqnnnqqOPDAA4tKpVIsueSSRaVSKdZcc83iueeeq36u0eWXXz7bXAXwVcx8vrbjjjsWbdq0qZ6nVSqVYumlly5OP/30WT7zxhtvFIcddljRvHnzYuWVVy5Gjx5dTJ06tSmGD8yFZj4Oevfdd4vbb7+9eP/994uiKIq77rqr+Pjjj4uiKIpp06ZVtz/llFOKSqVS1NbWFldcccVs3/X4448XL7/88mzff8EFFxSVSqXYbbfdimnTps3yO2De9u/mg2eeeaZYdtlli65duxZPPPFEURRFMX369Or/x44dW2y//fZFpVIpfvCDHxRvvvnmv/0+cw9AUQgBoCQOP/zwon379sWUKVOqP5s6dWqx/vrrF7W1tcWhhx5aTJo0qXjllVeKxx9/vOjWrVtRqVSKffbZp5g0aVJ1+0svvbRo27ZtUalUigUXXLDYZJNNqhe+Ab6pGTNmFIccckjRunXrol+/ftUbbxMnTix+/OMfV+ee5s2bFwcddFDx1FNPzfL5F198sRg8eHDxzDPPNMXwgbnQqFGjirvvvrt6Eajx/0888USxyCKLFJtvvnn1wveECROKfffdt6hUKsXRRx9d1NfXFyuvvHJRqVSK1VdfvXpMNGPGjKbZGaAUZo4jV1999aJSqRQ77LBDMWrUqGLgwIHFJptsUg0C+vTpM8tnG2OANm3aFJ06dSpuvvnmptgFYC41derU4qmnnqrOQ0VRVG/2/+xnP6vGRTOHjzPHAL/97W+rPx87dmyx/vrrF82bNy/++c9/Vr/z3nvvLZZbbrliwQUXLJ5//vk5tGfA3GTatGnFU089VXz66aez/PzOO+8sKpVK0b9//6IoilnmqqL47FzunnvuKZZddtmiQ4cOxdixY+fYmAHmVtZEgRKor6/PnXfemU8++ST/+Mc/kny27NHpp5+ev/3tb+ndu3fOPvvsLL744unSpUtWXXXV1NbWZtFFF81CCy2Udu3aJUlat26dgw46KOPGjcstt9yS++67L6NHj64upQTwVRX//81DxefeQPTQQw/lxhtvzGabbZYTTzwxbdu2zYQJEzJo0KBcddVVOfjgg3PVVVdliSWWyNVXX52RI0dW3/GWJEsvvXROPvnkrLjiinN0f4C504gRI3LQQQdl2LBh+etf/zrbuyG/973v5Wc/+1natWuXf/zjHxk5cmSuuOKKHHjggTnvvPNSU1OTYcOGpV27dhk3blz23nvvPPPMM15LAvxXGo+LampqUldXl969e2fcuHE56aSTcsMNN+SAAw7IaaedliuvvDIjR45MkgwfPjynnHJK9Ts6deqUE088MbvssktmzJiRbt26Ncm+AHOX559/Pj//+c+z6qqrZq211sr111+fjz76KNOnT0/r1q3Tvn37jBw5MmeffXamTZuWZs2apb6+PkkyePDgDBkyJPX19dlvv/0yatSo3HLLLTn22GPzt7/9LYMHD84iiyxSXXp7+eWXz1prrZX7778/yy23XFPuNvAd0zgX9ejRI2uvvXZuvPHGfPTRR9XfP/3000mSSZMmpb6+fpZztySpVCrZcMMN071797z99tu55ZZb5uj4AeZGrmDBXK7x/Ws9evTISy+9lCeffDJdu3ZNTU1N/vKXv6Rr16455ZRTqjf76+rqsuGGG2b8+PEZNGhQjjvuuLRr1y5TpkxJ27ZtkyTLLbeckzXgG6mvr09tbW31pK3x5tvzzz+f6dOnZ+TIkWnXrl3eeOONnHfeebnyyitz4IEH5pe//GWSZJtttsnFF1+cK6+8MkVR5Igjjkj37t2TxA044CtbaaWVsuqqq+bOO+9MTU1NBg4cmO9///upVCpZccUV83//93/p0KFDkmTcuHEZNWpUdtttt1x66aVJPgsrO3bsmBkzZmSZZZbJY489lsMPPzx/+tOf0rx586bcNWAu0ngcNPPF7FdffTV333131lxzzfTr1y/NmzfP9OnT06JFi3zve9/LYYcdlpqamvTu3TsXXXRRtthii6y33nppaGhIp06dMmzYsJx11llZfPHFm3DPgLnBfffdl0MPPTTPPfdc1l133fTs2TOdO3dOTU1NWrRokQMOOCDt2rXLySefnOHDhydJjjvuuLRu3bp6zWnw4MFp3rx5BgwYkIMPPrj63eecc06OPfbYJJ8dNyVJx44dc/nllztvA2bx7+aiRt27d0+LFi3y2muvVY+fGhoaqtvMmDEjzZs3z3bbbZcbb7wxM2bMaKrdAZhrOCKDuVyzZs2SJBtssEFuvPHGvPHGG0mSl156KQ888EB22GGHzD///Ek+uzG30UYbZcyYMRk0aFD69euX+eabL0lyxx135M0338yRRx7ZNDsClMJdd92VRx99NH/729/SuXPn7Lrrrll99dWr89ABBxyQJZZYIosttliS5MEHH8yoUaPSq1ev6o23JNl3331zxRVXpEuXLrnkkkvSokWLnH322WnRokWT7Bcwd9pyyy1z3nnn5dhjj83tt9+eJNUYoEWLFtV4MvnsqdvJkydXL2Y33pBbaqml0qVLlwwYMCA333xzTjzxRBEA8JXcf//9GT9+fB5//PEsuuii2W233bLccsulXbt2eeaZZ/LGG2/khz/8Ydq0aZP6+vpZjnNqamqy66675rbbbsvNN9+cp59+Ouutt15qampSFEU6duzYhHsGzC3uvffebLvttll00UVz2mmnZcCAAbNts9BCC2X33XdPQ0NDfv7zn39pDHDCCSdkqaWWyujRo7Pgggtm6623zs4775wks9yoS8TbwKy+ylyUJEsuuWTmn3/+3HPPPRk6dGgGDx6cmpqa6uoAjedhkyZNSpKsttpqc2oXAOZajspgLtdYRy6xxBJJPrsJ17t37+rPX3vtteq2G264YR566KHZIoAkOfPMM9O6devsv//+1dUDAL6OM844I8OGDcuHH35Y/dndd9+dXXbZJX379s1CCy2UJNlqq62SfLZCyfDhwzP//PPntNNOS/KvG28tWrRIfX19evXqlfvuuy+HH364CAD4WhqPhTbaaKOce+656dOnz2wxQOMNtenTp+cf//hHOnbsmFVWWSVJqnPOOeeck4kTJ2a77bbLfvvt12T7A8xdhg4dmnPPPTfvvPNO9We33HJLdtppp/Tv37+6Gtu4cePy7rvvpn379rN9x6KLLpr1118/N998c8aOHZsDDjhgtpUFAL7MuHHjsscee6RTp04ZOnRoevXqlWT2m/bJZzHAnnvumSRfGAPU1dWltrY2e+yxR3r16jXL57/o+wAafZ25aLnllss555yT/fbbLyeddFJatGiRfv36VR+ESz575eRvfvObdOzYMUsvvfQc3ReAuZGjNJgLNS63lqR6Eej73/9+Fl544bz99ttJkmWWWSYbb7xxJk2alDvuuCPrrbdeNQI4/vjjZ4kABg0alLFjx2bXXXetXpAC+Dr69OmTQYMGZf7550/fvn3Tv3//tG/fPs8++2yuuOKKjB49Osm/3o2bfPZuuKeeeioLLLBAdU5qvPH261//Oh06dMjxxx+fW265JSuttNKc3ylgrtQ4z1QqleqfN95445x77rnp2bNnbr/99px++ul58MEHq7HAtGnTUltbm0mTJuWyyy6rfteFF16Yyy+/PBtssIFVAICvrE+fPhk4cGCaN2+e3r175+ijj86CCy6Y8ePHZ9SoURk5cmQWWWSRdO7cOa+++mpeeumlJKm+jzv5LI5MklVXXTVJ0qZNGwEA8JW9//77GTp0aP75z3+mb9++//bGW6PGGODkk09OixYtMnz48Jx99tnV46S6urokme3zIgDgy3yduajx3G3PPffMkCFDkiT9+/dP7969c8MNN+S1117Lddddl759++bll1/OySefnJ49e87ZHQKYGxXAXKuurq4oiqKor68v3nrrraJLly5Fy5YtiwkTJhQzZswoBg8eXFQqlWK++eYrmjVrVpx00knFhx9+OMt3XHrppcXiiy9ebLDBBsWbb77ZFLsBzOWOOeaYolKpFLvuumvx5JNPVn8+fvz4Yu211y4qlUqxzTbbFPX19bN87p133im6detWdOzYsbj//vurv7/44ouLJZZYovjhD39YTJs2bY7uCzD3eu2114qPPvpolp81NDRUj5eKoijuvffeYvXVVy8qlUqx7bbbFvfff3/R0NBQFEVRXHfddUWlUikqlUqx/fbbF+uvv35RqVSKTp06Fc8888wc3Rdg7jXzcdETTzxR/fmTTz5ZPS5ab731ipdeeqno1atXUalUijXXXLN49913q9vOPG8dccQRRaVSKa6//vo5uh/A3G38+PHFIossUuy0007Vn33+fOzLvPfee8WFF15YLLbYYsVCCy1UnHrqqcWUKVO+pZECZfbfzkUffPBB8Ytf/KJ6flapVIrmzZsXlUqlaN26dXHeeedVt208nwPgi0k2YS4ybNiw9OnTJ9dcc03Gjx9fffq/oaEhHTp0yLrrrpvp06dn4sSJqa2tzfHHH5+11147kydPzmKLLZaNN964+p7uJDn55JNzwgknJElGjRrlPZPA19avX7+cd9552X333TN06NB07949RVGkvr4+q6yySi688MK0adMmDz30UF555ZXq5xoaGtKmTZtsvvnmeeutt3LYYYdln332yQ9/+MMcfvjhmTFjRs4888y0atWq6XYOmGscffTRWW211bLpppvmoosuyh133JEk1XfaFjOtDHDOOefMsjLA/fffn4aGhuy222659NJL07x58/zxj3/MU089lY022ij33HNPVlxxxabcPWAu8fnjoh49elSPi7p3756RI0emZcuWeeihhzJu3LhccMEFWWGFFTJ27NhsvfXWefLJJ/PRRx9Vl7+99NJLc+WVV2a11VbL+uuv38R7B8wNGo95rr766rz77rtZa621knx2TPRVn9xfaKGFss8+++RnP/tZWrdundNPPz2nnnrqLKuWAPw733QuWmCBBfLTn/60+qrITTbZJGuvvXZOOOGE/OEPf8jRRx+d5LNrS1ZMAvj3apt6AMBXM2zYsPTv33+Wny200EJZf/31s8gii2TrrbeuLin53HPPZdNNN83888+fW2+9NVtvvXUee+yx/OQnP8nKK6+c9u3b55lnnsljjz2WZZZZJjfddFOWX375ptgtYC42aNCgnH322enSpUv23HPPLLvsskk+O+FrvIC9xhprZPXVV09dXV0WW2yx6mdramrSunXrHHPMMXnrrbdyzz335Oqrr067du2y7rrr5te//rV5CfhKBg8enJEjRyZJ3nvvvTz22GNJkk022SRdu3bNQQcdlIUXXjgrrLBC9ednnXVW+vbtm9tvvz1FUWTgwIH5/ve/nwMPPDDrrrtu/vnPf2bxxRdPx44ds8ACCzTZvgFzj69yXLTWWmtlo402yp/+9Kd8+OGHWXTRRXPddddlt912y9ixY7PTTjulW7duWW+99TJu3Ljcdtttadu2ba666irRNvCVNN4Qmzp1apJU56KZ36/9ZYr//8qkZ599Nl27ds0+++yT+vr69O3bN507d/5K3wGQfLO5qPG1Ac8880w22GCDbLDBBkmSurq61NbWzrYdAP9epShmelkv8J01ceLEvPbaa3niiSfyxBNPZMKECRkzZkxmzJiRGTNmVA+wiqLIJptskj//+c/Vz3744YcZNGhQ/vrXv+bxxx9PknTr1i2bb755+vTpky5dujTFLgFzuQceeCCbbLJJGhoactBBB+Xwww+vvp+t8YRs8uTJ2WqrrfL+++9nkUUWyfzzz5/OnTtns802y3rrrZclllgikydPrsZJ3bp1y/LLL58OHTo08d4Bc4sHHnggm2++eRoaGrL00ktnq622ym233Zb33nsvH3zwQdq0aZOWLVtWb8ztvffe6dChQ8aPH5/99tsvjz/+eLbccssMHDgwG264oYtJwH/lqx4Xrb/++nn66afz17/+NWuvvXaS5K233sr++++fxx9/vLrqW6tWrbLeeuvlwgsvrIZMAF/VwQcfnFGjRuWYY47JOeeck4aGhq90A27atGk54IADsuOOO2avvfbKe++9lzfeeCPdu3efA6MGyuabzkU77bRTdt111zRv3jyJm/8A/w0hAMzFXn/99Xz88ce555578tprr2XMmDF56qmn8s4772TzzTfPnXfeWQ0E6urqUldXl+eeey7NmjWrXkxqPJAC+G88+uij1YvY++67b4455pisttpq1d9fe+212Wuvvap/r1Qq1SdNFllkkfzgBz/IlltumbXWWitdunTxlAnwX3n44YezwQYbpK6uLmeeeWa22267NGvWLL/97W/z/PPP54YbbkhtbW3q6urSsWPHdOnSJX369Mnjjz+e2267LePGjcuOO+6Yo446KptttpnlJYH/yn86Lrrqqquyzz775OCDD855552Xli1bpr6+PrW1tZk2bVqeffbZPP3005k+fXp69OiRpZdeOgsttFAT7Q0wN2o81xo6dGgGDhyYTTfdNHfffXeSf38DrfF3r776arp27Zptt902o0ePTosWLWbbBuA/+V/NRdttt11Gjx7t+jXANyAEgLlM44HUFx00ffjhh7nzzjtz5JFH5p///Ge22GKL3HnnnUmSGTNmzHbQ1PhdAN/EI488knXWWSdJss8+++SnP/1pVl999dx+++3ZbrvtsvDCC6d3797p1q1bZsyYkZtuuimvvPJKdfnuJNlggw0yevTotG/fvql2A5jLzTwX9e/fPyeddFJatWqVJBkzZkwmTZqUyy67LG+88UaeeOKJJEmbNm1SqVTy6aefpq6uLnvssUd+9atfpXXr1k22H8Dc7T8dF62++uoZPnx4Ntxww+pn3FwD/teefPLJrL/++pk6dWoGDBiQ0047LckXzzczXxv6xS9+kb59++bqq6/O7rvvPsfHDZSLuQig6QkBoARmPniaOnVqbrzxxvTp0ydvv/32f4wBAP4XZr7offjhh2eFFVbIMccck5VXXjlDhgzJzjvvXN32k08+SU1NTW644YY8++yzuf766/P73/8+3bp1a6rhAyUx89O4J5xwQo499tgstthi1d9/8sknKYoio0ePzrPPPpvf/va3mTp1at55553MP//8efDBB7Pyyis31fCBkviy46Ju3bpl6NCh2WGHHZp4hEDZNTQ05IQTTsiIESOy+OKLZ+DAgTn00EOTJPX19dWV2Ga+8Xbvvfdmr732SseOHXP11Vd7LQnwjZmLAJqeEABKaNq0aRk9enQ1Bthmm21y6623evof+FbNfNG7Uqmka9euOe+887L99tsn+ddJ3ufL72nTpnn6FvifmXkuGjBgQI499tgsssgiSWZfDemtt97KP//5z1x99dXZb7/9XGQC/mf+03GR1dmAb9urr76a3XbbLWPHjs3yyy+fI444IkcddVSS2eegBx98MIMGDcr999+fK6+8cpbXuwF8E+YigKZl7TkoodatW2fnnXfOueeem06dOuX222/Prrvu2tTDAkpurbXWypgxY9KyZcsURZGllloqyyyzTPX3jaV3YwTQ2CI2Lt0N8L/QOBclyRlnnJHhw4fn3XffTfLZzbjGuacoiiy++OLp3r17Tj/9dBEA8D/1n46LRADAt61Lly757W9/mxVXXDHPP/98Bg4cmAMPPDATJ07M5MmTk3y2WtJvf/vbHHDAAbnvvvtyzjnnVG+8eXYM+F8wFwE0LSsCQIlNmzYt11xzTYYOHZprrrkmPXv2bOohAfOAhx9+OOuvv34aGhqy//7758gjj8zqq6/e1MMC5jGfXxmgT58+ad++fROPCpjXOC4Cmtpzzz2Xo48+Og888ECmTZuWrl27pnnz5unYsWNee+21vPTSS1l44YVzxhln5OCDD07yxe/vBvgmzEUATUMIACU3bdq0zJgxI/PPP39TDwWYh8x8A27ffffNMccck9VWW61pBwXMc8QAwHeB4yKgqb399tu56aabMnTo0EyZMiVvv/12WrZsmUUXXTS9evXKjjvumI033jiJG2/At8dcBDDnCQEAgG/FzBe9DzjggBx22GFZc801m3hUwLxm5rlo8ODBOeqoo7Looos28aiAeY3jIuC74O23385HH32UCRMmZLHFFsuSSy6ZRRZZpPq6ks+/rxvg22AuAphzhAAAwLfmkUceyYYbbpjp06fn8MMPz7nnnpuWLVs29bCAecwjjzyS73//+6mrq8uQIUMycOBAT5cAc5zjIuC7yFO3wHeBuQjg2yEEAAC+VX/729+yww475L777svKK6/c1MMB5lF/+9vfst122+WBBx4wFwFNxnERAAAAc4oQAAD41n3yySdp1apVUw8DmMeZi4DvAnMRAAAAc4IQAAAAAAAAAABKxEtXAAAAAAAAAKBEhAD/39tvv51bbrklJ510UrbddtssssgiqVQqqVQq2X///Zt6eAAAAAAAAADwldQ29QC+Kzp06NDUQwAAAAAAAACAb8yKAF+gc+fO2WqrrZp6GAAAAAAAAADwtVkR4P876aSTstZaa2WttdZKhw4d8sorr6Rr165NPSwAAAAAAAAA+FqEAP/fz3/+86YeAgAAAAAAAAB8Y14NAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEapt6APOSTTbZpKmHAMzDWrVqldtvvz1Jss022+STTz5p4hEB8yJzEfBdYC4CvgvMRcB3gbkI+K659957m3oIzIUuu+yyXHXVVdl1111z5JFHNvVwvjOsCAAAAAAAAAAAJSIEAAAAAAAAAIASEQIAAAAAAAAAQIkIAQAAAAAAAACgRIQAAAAAAAAAAFAiQgAAAAAAAAAAKBEhAAAAAAAAAACUiBAAAAAAAAAAAEqktqkH8F3xwAMPZMKECdW/v/POO9U/T5gwIb/5zW9m2X7//fefQyMDAAAAAAAAgK9OCPD/XXbZZbn88su/8HcPPvhgHnzwwVl+JgQAAAAAAAAA4LvIqwEAAAAAAAAAoESEAP/fb37zmxRF8ZX/AwAAAAAAAIDvIiEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAAAAAoESEAAAAAAAAAAJSIEAAAAAAAAAAASkQIAAAAAAAAAAAlIgQAAAAAAAAAgBIRAgAAAAAAAABAiQgBAAAAAAAAAKBEhAAAAAAAAAAAUCJCAAAAAAAA4P+1d+9BWpb1H8c/C+QBBHTwsMoyoptJHphM8ZSKhwQxFRmmcjKPRSalw5jkOKbpTKMkYCp5ADFNx2LSqfUwbB5KF7NERWpUUMMDwcKiVJ5wFXD5/dGwA+4usIuyeP1er5mdufe57vu6v7t/7D/7fu4HACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAoJP1798/FRUVrX4deeSRnT0enzHdOnsAAAAAAAAAAJLevXtnzJgxLV7v37//Jp+FzzYhAAAAAAAAAMBmYNttt83ll1/e2WNQAB8NAAAAAAAAAAAF8UQAAAAAAAAAgM3Ahx9+mNtvvz2LFi1Kr169MmjQoBx00EGdPdZGWbhwYWpra9PQ0JDKysoMGzYsVVVVnT1W8YQAAAAAAAAAAJuBhoaGnHXWWWu9NmjQoPz2t79NdXV1J03VcbW1tZkwYcJar02bNi1jx47Ncccd10lT/f/gowEAAAAAAAAAOtlZZ52VP/3pT1myZEmWLVuW2bNn57TTTsvTTz+dY445Ju+++25nj9guCxcuzIQJE9LU1NTia/z48amvr+/sEYvmiQAAAAAAAAAAneynP/3pWt9/6Utfyh133JEkufPOO3PLLbfkggsu6IzROqS2trbNtaampnz729/+RO/3n//85xPd77POEwEAAAAAAAAANlPnnHNOkuSJJ57o5Enap6GhYZPe75lnntmk99vceSIAAAAAAAAAwGZq++23T5IsW7askydpn8rKynWu77TTTtlll102+j5///vfs2rVqhx77LEbvVdJhAAAAAAAAAAAm6mZM2cmSfr379+5g7TTsGHDMm3atFbXunTpkokTJ6Zv374bfZ+pU6fmrrvuSkVFxUbvVRIfDQAAAAAAAADQiV588cW8//77rb5+0UUXJUm+9a1vbeqxNkpVVVXGjh2bLl26tPgaO3bsJxIB0DZPBAAAAAAAAADoRNOmTcs111yTI444Irvuumt69OiRl19+OdOnT8+KFSty8cUX54gjjujsMdvtuOOOy7777pvp06enoaEhlZWVOf7440UAm4AQAAAAAAAAAKATHXXUUZk7d25mz56dxx9/PO+//3623377HH/88Rk9enSGDBnS2SN2WN++fTNq1KjOHuP/HSEAAAAAAAAAQCcaPHhwBg8e3NljUJAunT0AAAAAAAAAAPDJEQIAAAAAAAAAQEGEAAAAAAAAAABQECEAAAAAAAAAABRECAAAAAAAAAAABRECAAAAAAAAAEBBhAAAAAAAAAAAUBAhAAAAAAAAAAAURAgAAAAAAAAAAAURAgAAAAAAAABAQYQAAAAAAAAAAFAQIQAAAAAAAAAAFEQIAAAAAAAAAAAFEQIAAAAAAAAAQEGEAAAAAAAAAABQECEAAAAAAAAAABRECAAAAAAAAAAABRECAAAAAAAAAEBBhAAAAAAAAAAAUBAhAAAAAAAAAAAUpEMhQEVFxQZ9HXnkkevdq7a2NiNGjEhVVVW23HLLVFVVZcSIEamtrV3vtXV1dbnqqqsyYsSI7L333tlpp52yxRZbpHfv3tl3331z7rnnZtasWRv8cy1dujSXXXZZBg4cmF69eqVXr14ZOHBgLrvssvz73//e4H0AAAAAAAAAoLN066wbNzU15Xvf+15uvfXWtV6vr69PfX19ampq8t3vfjeTJ09Oly6t9wqnnnpq6uvrW7y+YsWKPP/883n++eczefLk/PCHP8y1117b5j5JMnPmzJx88slpaGhY6/Xnnnsuzz33XKZOnZqampoceOCBHfhpAQAAAAAAAGDT2KgQ4Nxzz83o0aPbXO/Ro0eba5dccklzBLDffvvlxz/+caqrq/PKK6/k6quvzuzZszN16tTssMMOufLKK9vcf+jQoTnkkEOyxx57ZOedd06vXr3S0NCQp556KpMnT86SJUsyadKkdO/ePePGjWt1nwULFuTEE0/Mm2++mW7duuWCCy7ICSeckCR54IEHcs0112Tx4sU58cQTM2vWrFRVVW3orwgAAAAAAAAANsgf/vCH3HjjjXn22WezbNmy7Lzzzjn44INz9dVXp1+/fhu8z0aFADvuuGP22Wefdl/38ssvZ8KECUmSAw44IDNmzMjWW2+dJBk0aFBOOumkDB48OM8880zGjx+fs88+O5///Odb7PPCCy+kW7fWf4Svfe1rOf/883PggQfm1VdfzcSJEzN27Nj06dOnxbmXXHJJ3nzzzSTJb37zm3z9619vXjv88MOz//7755vf/GbeeOON/OQnP8ntt9/e7p8ZAAAAAAAAAFqzatWqfP/738+UKVNSXV2dU045JT179syiRYtSV1eX+fPntysEaPtZ+Z+ia6+9NitXrkySTJo0qTkCWK179+6ZNGlSkmTlypX5xS9+0eo+bUUAq/Xp0yejRo1q3ufJJ59scU5DQ0PuuuuuJMnQoUPXigBW+8Y3vpGhQ4cmSe68884WHx8AAAAAAAAAAB11/fXXZ8qUKRk9enReeuml3HDDDRk3blzuuOOOzJ8/PwcffHC79tvkIcCqVaty7733JkkGDBjQ5sAHH3xw9txzzyTJvffem1WrVnXofj179mw+/uCDD1qs33fffWlqakqSnHXWWW3uc+aZZyZJmpqact9993VoFgAAAAAAAABYU2NjY6644orsvvvuue6669K1a9cW56zvTfIft8lDgNdeey2LFi1KkgwePHid565er6+vz+uvv97uezU1NeV3v/td8/cDBgxocc5f/vKXFvdb1yxJ8sQTT7R7FgAAAAAAAAA+We+8806SZObMmbnllluycOHCTp6o/R566KH897//zcknn5yPPvoov//97zNu3LjcfPPNmTdvXof23KgQ4O67785ee+2V7t27p2fPntljjz1yxhln5NFHH23zmjlz5jQft/aP+TWtuT537twNmumjjz5KfX19HnjggRx99NGZMWNGkuSrX/1q9t577zbn6d27dyorK9vcd+edd06vXr3aNQsAAAAAAAAAn47a2trcf//9SZKFCxdm2rRpOeOMM/LHP/6xkydrn1mzZiVJunbtmoEDB2bkyJG5+OKLc+6552bPPffMhRde2O49NyoEmDNnTubOnZvGxsa89957mTdvXu64444cffTRGTFiRN5+++0W16xZYFRVVa1z/379+jUfL1iwYJ3nVlRUpKKiIt26dUtVVVVOPPHE1NXVJUm+/OUv59e//nWr162eZ32zrDnP+mYBAAAAAAAA4NOzcOHCTJgwYa3Xmpqa0tTUlPHjx6e+vr6TJmu/N954I0lyzTXXpHfv3nnqqafy7rvvZsaMGfnCF76QiRMn5qabbmrXnh0KAbp3755TTjklt9xySx5//PHMnj07Dz30UC655JL06dMnSVJTU5Phw4dnxYoVa1377rvvNh9vs80267xPjx49mo/fe++9Ds1500035a9//Wt22WWXVs9ZPc/6Zllzno7MAgAAAAAAAMAno7a2dp3r06dP30STbLympqYkyRZbbJGampoMGjQo22yzTQ4//PDcfffd6dKlSyZOnNiuPbt1ZJD6+vpsu+22LV4/9thjc95552XYsGGZPXt26urqctNNN+X8889vPueDDz5oPt5iiy3WeZ8tt9yy+bixsXGd5z733HNJ/vfRAEuWLMmjjz6am2++ORdeeGFeeumlXH311fnc5z7X4rrV86xvljXnWd8sbXnsscc6dB3AJ+2z9kgcoEz+FgGbA3+LgM2Bv0XA5sDfIgA+axoaGjZqfXPSu3fvJMkBBxzQ4g3u++yzT3bffffMmzcvb731Vqv/p29Nh0KAdW2+00475Z577smAAQOyYsWKTJo0aa0QYKuttmo+Xr58+Trv8+GHHzYfb7311us8d5999lnr+yFDhmT06NEZPHhwrr322rzwwgupra1N165d1zpvq622yvvvv7/eWdacZ32zAAAAAAAAAPDpufTSS3PppZd29hifiD333DNJ2/+HX/16Y2PjBocAHfpogPXZfffdc+yxxyZJ5s2bl0WLFjWv9ezZs/l4fY/YX7ZsWfPxhjy6/+P69euXG264IUny8MMP59Zbb21xzup5NuRx/6vn6cgsAAAAAAAAAPBxRx11VJJk7ty5LdZWrFiRefPmpUePHtlhhx02eM9PJQRIkr322qv5uL6+vvm4qqqq+XjhwoXr3GPBggXNx/369evQHEOGDGl+B/8999zTYn31POubZc15OjoLAAAAAAAAAKypuro6Q4YMybx58zJ16tS11saNG5e33norI0aMSLduG/7A/w59NMCGqKioaPX1NQOBF198cZ17rLn+xS9+sUNzdO3aNdttt10aGxszf/78VueZNWtW3n777TQ0NKSysrLVfRYvXpx33nlno2YBAAAAAAAAgI+78cYbc+ihh2bUqFGpqanJgAEDMnv27Pz5z3/OrrvumvHjx7drv0/tiQBz5sxpPt5ll12aj3fbbbfm7+vq6ta5x4wZM5Ikffv2Tf/+/Ts0x/Lly7N06dIkrT/S/7DDDms+Xtc8a6595Stf6dAsAAAAAAAAAPBx1dXVeeaZZ3LmmWdm1qxZuf766/PPf/4zP/jBD/LUU0+1+Yb2tnwqIcBrr72Whx9+uHngvn37Nq9VVFRk+PDhSf73jv8nn3yy1T2efPLJ5icCDB8+vM0nDKzPvffem+XLlydJ9t133xbrJ510Urp0+d+v4bbbbmtzn9tvvz1J0qVLl5x00kkdmgUAAAAAAAAAWtOvX7/cdtttWbx4cZYvX55//etf+eUvf5kdd9yx3Xu1OwS4//77s3LlyjbXlyxZkpEjRzb/83306NEtzhkzZky6du2aJDnvvPPS2Ni41npjY2POO++8JEm3bt0yZsyYFns88sgjmTdv3jpnnTNnTs4///zm708//fQW51RWVubUU09Nkjz44IO55557Wpxz991358EHH0ySnHbaae2uLQAAAAAAAABgU6lYtWrVqvZc0L9//6xYsSIjR47MIYcckv79+2frrbfO0qVL89hjj2Xy5MnNj+I/7LDD8sgjj2TLLbdssc/FF1+ccePGJUn222+/XHTRRamurs4rr7ySn//855k9e3bzeVdeeWWL6y+//PL87Gc/yzHHHJOhQ4dm4MCB6dOnT1auXJn58+fnoYceyp133pkPPvggSXL22Wfn1ltvbfVnWrBgQfbff/+8+eab6datW370ox/lhBNOSJI88MADmThxYlauXJkddtghzz77bKqqqtrzKwMAAAAAAACATaZDIcD8+fPXe97IkSMzderUbLvttq2uNzU1ZdSoUfnVr37V5h7f+c53MmXKlOZH96/p8ssvzxVXXLHeObp27ZoLLrggV111VfNTCFozc+bMnHzyyWloaGh1vbKyMjU1NTnooIPWe08AAAAAAAAA6CztDgHq6upSV1eXv/3tb3n11VezdOnSvPPOO9lmm23Sr1+/HHrooTnjjDNyyCGHbNB+06dPz5QpU/L0009n6dKl2X777TNo0KCcc845GTZsWJvXvf3226mtrc1jjz2Wf/zjH1m8eHHeeOONNDU1ZbvttsuAAQNyxBFH5PTTT091dfUGzbJ06dJcd911qampyeuvv54k2W233TJ8+PCMGTMmffr02aB9AAAAAAAAAKCztDsEAAAAAAAAAAA2Xy2fuQ8AAAAAAAAAfGYJAQAAAAAAAACgIEIAAAAAAAAAACiIEAAAAAAAAAAACiIEAAAAAAAAAICCCAEAAAAAAAAAoCBCAAAAAAAAAAAoiBAAAAAAAAAAAAoiBAAAAAAAAACAgggBAAAAAAAAAKAgQgAAAAAAAAAAKIgQAAAAAAAAAAAKIgQAAAAAAAAAgIIIAQAAAAAAAACgIEIAAAAAAAAAACjI/wE2AHwH/lX5HQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 2500x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import missingno as msno # 결측치 데이터를 matrix로 나타내는 라이브러리.\n",
    "\n",
    "msno.matrix(df) # 데이터프레임의 결측치 데이터를 matrix로 표현한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d5ade096-17f9-44e8-9118-56be4b675bfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Name</th>\n",
       "      <th>Point</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4990</th>\n",
       "      <td>2022</td>\n",
       "      <td>90</td>\n",
       "      <td>Universit Paris-Saclay</td>\n",
       "      <td>75.4</td>\n",
       "      <td>Gif-sur-Yvette</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Year  Rank                    Name  Point            City Country\n",
       "4990  2022    90  Universit Paris-Saclay   75.4  Gif-sur-Yvette     NaN"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Country'].isna()] # Country column의 결측치 location을 나타내줌."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7a7fdf4c-40dd-4959-b608-fdc91ae34715",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna(subset=['Country']) # Country column의 결측치 데이터를 제거한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "5fed3c92-d8f8-45d6-b4e8-b9fe342b2229",
   "metadata": {},
   "outputs": [],
   "source": [
    "upperlist = [] # upperlist 변수에 담을 리스트를 공백으로 생성.\n",
    "for x in df.columns: # 데이터프레임의 columns를 x 변수로 반복 실행.\n",
    "    upperlist.append(x.lower()) # df.columns의 리스트 데이터에서 value의 값을 lower함수를 통해 대문자를 소문자로 변환시켜 upperlist의 빈 리스트에 하나씩 대입한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "24b76221-3a10-4ec0-9a50-bd4afccff9f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = upperlist # df.columns의 원본 columns를 upperlist에 저장된 소문자 columns형태의 리스트를 대입한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d50ddcaf-58cf-4705-a71b-bbe3284b40b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['year', 'rank', 'name', 'point', 'city', 'country'], dtype='object')"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns # 데이터프레임의 columns 출력."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "2172138d-69ce-45dc-a701-b130ce0874c4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>rank</th>\n",
       "      <th>name</th>\n",
       "      <th>point</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>University of Cambridge</td>\n",
       "      <td>94.6</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>2</td>\n",
       "      <td>University of Oxford</td>\n",
       "      <td>94.6</td>\n",
       "      <td>Oxford</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>Massachusetts Institute of Technology (MIT)</td>\n",
       "      <td>92.5</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>5</td>\n",
       "      <td>Johns Hopkins University</td>\n",
       "      <td>92.1</td>\n",
       "      <td>Baltimore</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  rank                                         name  point       city  \\\n",
       "0  2018     1                           Harvard University   97.7  Cambridge   \n",
       "1  2018     2                      University of Cambridge   94.6  Cambridge   \n",
       "2  2018     2                         University of Oxford   94.6     Oxford   \n",
       "3  2018     4  Massachusetts Institute of Technology (MIT)   92.5  Cambridge   \n",
       "4  2018     5                     Johns Hopkins University   92.1  Baltimore   \n",
       "\n",
       "           country  \n",
       "0    United States  \n",
       "1   United Kingdom  \n",
       "2   United Kingdom  \n",
       "3    United States  \n",
       "4    United States  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "469b57b8-a787-49d8-a003-a8ce342b795d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>rank</th>\n",
       "      <th>name</th>\n",
       "      <th>point</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>700</th>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.2</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1050</th>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1400</th>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.2</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1750</th>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.5</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2100</th>\n",
       "      <td>2021</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2450</th>\n",
       "      <td>2021</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.2</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2800</th>\n",
       "      <td>2021</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.5</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3150</th>\n",
       "      <td>2021</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.6</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3500</th>\n",
       "      <td>2022</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>97.7</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3850</th>\n",
       "      <td>2022</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.2</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4200</th>\n",
       "      <td>2022</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.5</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4550</th>\n",
       "      <td>2022</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>98.6</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4900</th>\n",
       "      <td>2022</td>\n",
       "      <td>1</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>99.0</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      year  rank                name  point       city         country\n",
       "0     2018     1  Harvard University   97.7  Cambridge   United States\n",
       "350   2019     1  Harvard University   97.7  Cambridge   United States\n",
       "700   2019     1  Harvard University   98.2  Cambridge   United States\n",
       "1050  2020     1  Harvard University   97.7  Cambridge   United States\n",
       "1400  2020     1  Harvard University   98.2  Cambridge   United States\n",
       "1750  2020     1  Harvard University   98.5  Cambridge   United States\n",
       "2100  2021     1  Harvard University   97.7  Cambridge   United States\n",
       "2450  2021     1  Harvard University   98.2  Cambridge   United States\n",
       "2800  2021     1  Harvard University   98.5  Cambridge   United States\n",
       "3150  2021     1  Harvard University   98.6  Cambridge   United States\n",
       "3500  2022     1  Harvard University   97.7  Cambridge   United States\n",
       "3850  2022     1  Harvard University   98.2  Cambridge   United States\n",
       "4200  2022     1  Harvard University   98.5  Cambridge   United States\n",
       "4550  2022     1  Harvard University   98.6  Cambridge   United States\n",
       "4900  2022     1  Harvard University   99.0  Cambridge   United States"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['name']=='Harvard University'] # 데이터프레임 columns중 name columns에서 Harvard University라는 문자열 원소를 가진 location을 출력함."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "4a7897fd-f54f-4ef6-bd3c-fd98e400ddd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2018, 2019, 2020, 2021, 2022], dtype=int64)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['year'].unique() # 데이터프레임에서 year column의 원소값들을 출력하는 함수."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "964f8f0e-6f33-4e36-9473-d9513f6f2804",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2022    1670\n",
       "2021    1343\n",
       "2020    1009\n",
       "2019     672\n",
       "2018     335\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['year'].value_counts() # 데이터프레임에서 year column의 원소값을 가진 합산을 출력하는 함수."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "79785565-e6f2-42f6-b503-374eb2385615",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "encoder = LabelEncoder()\n",
    "\n",
    "for col in ['year', 'rank', 'name', 'city', 'country']: # 리스트에 속한 데이터프레임의 columns를 인덱스로 대입하여\n",
    "    df[col] = encoder.fit_transform(df[col]) # 해당 column의 원소들을 정수형 타입으로 인코딩한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "7e588837-fa96-4f65-9171-28c715f223e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(['point'],axis=1) # x, y 데이터 분리하는 작업. y가 결과값이다.\n",
    "y = df['point']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "8d9a4a97-3e4b-4b2c-b91b-8a674cb55b61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(df['point']) = print(df.loc[:,'point'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "c0fceab8-8503-4f25-9f5a-d719065b5cb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split # 학습 데이터와, 테스트 데이터를 분리하고, 자동으로 섞어주는 라이브러리, random_state = 2022를 통해 그 값은 항상 고정된다.\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2022)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "60fb3760-0649-41a6-93a9-91db8b436ac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler # 실제 데이터값, 평균 값, 표준편차 값을 통한 표준화 과정.\n",
    "\n",
    "scaler = StandardScaler()\n",
    "x_train = scaler.fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "67384c3a-5d4a-4cd0-81c6-06adc929c64b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = y_train.values # 시리즈 형태의 데이터값을 넘파이 배열로 변환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "a405714e-e143-4ad0-b538-c646d238eb14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression # 머신러닝 선형 회귀 알고리즘\n",
    "\n",
    "lr = LinearRegression()\n",
    "lr.fit(x_train, y_train) # fit함수를 통해 컴퓨터를 학습시킨다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "33fdcb8c-8956-4018-9f7e-7ba98e8be0a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9159386477474661"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_train, y_train) # lr의 score는 R2의 값을 나타냄. 1에 근접 할 수록 좋은 결과이다. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e196a96f-afb8-410b-85a4-2390bbbc6839",
   "metadata": {},
   "source": [
    "### 테스트"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "0a553272-4b03-417c-8b1a-4be701abc6ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test = scaler.fit_transform(x_test) # 표준화를 fit_transform을 통해 계산과 변환을 동시에 적용시킨다.\n",
    "y_test = y_test.values # 시리즈 타입의 y_test 값을 넘파이 배열로 변환."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "97ab61a6-b15a-4d7e-8d18-22ac4b99d193",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.06252367, -1.39096624,  0.36384383,  1.52136185, -1.61697594],\n",
       "       [-0.5521271 , -0.27999667,  0.40012003, -0.25321849,  0.90980406],\n",
       "       [ 0.25519828, -0.9221167 , -0.65188986,  0.07817904,  0.84663456],\n",
       "       ...,\n",
       "       [ 0.25519828, -0.98327099, -1.0509281 , -0.02872339, -0.22724694],\n",
       "       [-1.35945249, -1.30942719,  0.46360339, -1.01222574,  0.90980406],\n",
       "       [-0.5521271 ,  0.70866432, -0.63375176, -0.14631606, -1.61697594]])"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "613ea2b5-f62a-4b29-9df7-50d51e4edf2d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = lr.predict(x_test) # x_test 데이터를 통하여 컴퓨터에게 학습시킨 내용을 토대로 predict함수를 통해 결과값을 예측시켜 y_pred 변수에 대입한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "98dd3d4f-0164-4c59-b1eb-5e4e67d4693c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([82.4, 70.1, 77.6, ..., 77.9, 80.1, 65.6]),\n",
       " array([81.49052415, 73.00321788, 78.33928902, ..., 78.56478308,\n",
       "        80.7074709 , 64.78095958]))"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test, y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "d078dd93-47ef-4e1b-b298-91a5667cdc40",
   "metadata": {},
   "outputs": [],
   "source": [
    "examdf = pd.DataFrame(y_test) # examdf라는 새로운 데이터프레임을 생성하여, 실제 데이터값 y_test와 컴퓨터 예측 데이터값 y_pred의 데이터값을 비교해보기 위해 생성하였다.\n",
    "examdf['y_pred'] = pd.DataFrame(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "0c212d42-a703-4a26-90df-7e1c490c7824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>y_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>82.4</td>\n",
       "      <td>81.490524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>70.1</td>\n",
       "      <td>73.003218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>77.6</td>\n",
       "      <td>78.339289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>68.1</td>\n",
       "      <td>68.807102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.9</td>\n",
       "      <td>58.977969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>66.6</td>\n",
       "      <td>66.610293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>62.6</td>\n",
       "      <td>60.172606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>77.9</td>\n",
       "      <td>78.564783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>80.1</td>\n",
       "      <td>80.707471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>65.6</td>\n",
       "      <td>64.780960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1006 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0     y_pred\n",
       "0     82.4  81.490524\n",
       "1     70.1  73.003218\n",
       "2     77.6  78.339289\n",
       "3     68.1  68.807102\n",
       "4     60.9  58.977969\n",
       "...    ...        ...\n",
       "1001  66.6  66.610293\n",
       "1002  62.6  60.172606\n",
       "1003  77.9  78.564783\n",
       "1004  80.1  80.707471\n",
       "1005  65.6  64.780960\n",
       "\n",
       "[1006 rows x 2 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "examdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "a936eba0-efd3-4a72-ade2-95a272aecfba",
   "metadata": {},
   "outputs": [],
   "source": [
    "examdf.columns = ['y_test', 'y_pred'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "3c23893b-9dba-47d7-9540-5f471348be87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_test</th>\n",
       "      <th>y_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>82.4</td>\n",
       "      <td>81.490524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>70.1</td>\n",
       "      <td>73.003218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>77.6</td>\n",
       "      <td>78.339289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>68.1</td>\n",
       "      <td>68.807102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.9</td>\n",
       "      <td>58.977969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>66.6</td>\n",
       "      <td>66.610293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>62.6</td>\n",
       "      <td>60.172606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>77.9</td>\n",
       "      <td>78.564783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>80.1</td>\n",
       "      <td>80.707471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>65.6</td>\n",
       "      <td>64.780960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1006 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      y_test     y_pred\n",
       "0       82.4  81.490524\n",
       "1       70.1  73.003218\n",
       "2       77.6  78.339289\n",
       "3       68.1  68.807102\n",
       "4       60.9  58.977969\n",
       "...      ...        ...\n",
       "1001    66.6  66.610293\n",
       "1002    62.6  60.172606\n",
       "1003    77.9  78.564783\n",
       "1004    80.1  80.707471\n",
       "1005    65.6  64.780960\n",
       "\n",
       "[1006 rows x 2 columns]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "examdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "a8393ba4-bde7-4a60-a369-cfa2b7047a8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "examdf['x_origin'] = pd.Series(range(0,1006))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "5b994694-a7ba-4d67-af81-acceb6992813",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_test</th>\n",
       "      <th>y_pred</th>\n",
       "      <th>x_origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>82.4</td>\n",
       "      <td>81.490524</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>70.1</td>\n",
       "      <td>73.003218</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>77.6</td>\n",
       "      <td>78.339289</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>68.1</td>\n",
       "      <td>68.807102</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.9</td>\n",
       "      <td>58.977969</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>66.6</td>\n",
       "      <td>66.610293</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>62.6</td>\n",
       "      <td>60.172606</td>\n",
       "      <td>1002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>77.9</td>\n",
       "      <td>78.564783</td>\n",
       "      <td>1003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>80.1</td>\n",
       "      <td>80.707471</td>\n",
       "      <td>1004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>65.6</td>\n",
       "      <td>64.780960</td>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1006 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      y_test     y_pred  x_origin\n",
       "0       82.4  81.490524         0\n",
       "1       70.1  73.003218         1\n",
       "2       77.6  78.339289         2\n",
       "3       68.1  68.807102         3\n",
       "4       60.9  58.977969         4\n",
       "...      ...        ...       ...\n",
       "1001    66.6  66.610293      1001\n",
       "1002    62.6  60.172606      1002\n",
       "1003    77.9  78.564783      1003\n",
       "1004    80.1  80.707471      1004\n",
       "1005    65.6  64.780960      1005\n",
       "\n",
       "[1006 rows x 3 columns]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "examdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "e61a9bc8-0942-42a4-b8f0-1876ec1cb85c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1b3d03122e0>]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(examdf['x_origin'], examdf['y_test'], 'r') # 빨간 선은 실제 데이터, 파란 점은 컴퓨터 예측값.\n",
    "plt.plot(examdf['x_origin'], examdf['y_pred'], 'g')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "d15050f3-06e2-4ede-8e11-a8e9db02a767",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.24133835835532"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error # mse 오차의 제곱의 평균, 예측 값과 실제 데이터 값과의 오차를 제곱하여 평균 값으로 환산하는 데이터이다.\n",
    "\n",
    "# MSE\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "bdefc39c-515d-44b3-a129-42cc088132b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2893969420690943"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse = np.sqrt(mse) # rmse는 mse(mean squared error)의 루트값.\n",
    "rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "020ae863-64d0-4dbc-ab4c-041a7081d4b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score # cross validation을 통해 데이터의 검증방법을 cv를 통해 여러 구간으로 나누어서 확인시킨다.\n",
    "\n",
    "mse = cross_val_score(lr, x_test, y_test,\n",
    "                scoring='neg_mean_squared_error',\n",
    "               cv=1000) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "f88d3210-3f80-4856-a488-60d9b2e5bd48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6979128905667458"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(np.sqrt(-mse))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "flyai",
   "language": "python",
   "name": "flyai"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
